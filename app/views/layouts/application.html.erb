<!DOCTYPE html>
<html>
  <head>
    <%= metamagic site: 'Papercup', title: [:site, :title], separator: " | " %>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="stripe-key" content="<%= Rails.application.credentials.stripe[:publishable_key] %>">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <!-- Work Sans font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Work+Sans:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <!-- extra Tailwind components -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.5/flowbite.min.css" rel="stylesheet" />

    <!-- app styles -->
    <%= stylesheet_link_tag "tailwind", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>

    <%= render "shared/script_tags" if defined?(render_script_tags) %>
    
    <!-- Stripe.js -->
    <script src="https://js.stripe.com/v3/" defer></script>

    <!-- Add meta tag for authentication state -->
    <meta name="logged-in" content="<%= user_signed_in? %>" />

    <%= content_for :page_title %>
  </head>

  <body class="bg-background" data-controller="application" data-credits="<%= current_user&.credit_balance || 0 %>" data-call-status="idle">
    <%= render "shared/header" %>
    
    <main class="container mx-auto px-4 py-4">
      <%= render "shared/flash" if defined?(render_flash) %>
      <%= render "shared/impersonator" %>
      <%= yield %>
    </main>
    
    <%= render "shared/footer" %>
    
    <!-- Global notification container -->
    <div data-application-target="notificationContainer" class="fixed top-4 right-4 z-50 w-96 hidden">
      <div class="flex items-start gap-4 p-4 rounded-lg shadow-lg bg-white">
        <!-- Icon container -->
        <div data-notification-type class="flex-shrink-0 w-6 h-6">
          <!-- Success icon (checkmark) -->
          <svg data-success-icon class="hidden w-6 h-6 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          
          <!-- Warning icon (exclamation) -->
          <svg data-warning-icon class="hidden w-6 h-6 text-yellow-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
          
          <!-- Error icon (x-circle) -->
          <svg data-error-icon class="hidden w-6 h-6 text-red-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          
          <!-- Info icon (information-circle) -->
          <svg data-info-icon class="hidden w-6 h-6 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        
        <!-- Content -->
        <div class="flex-1">
          <h3 data-notification-title class="text-sm font-medium text-gray-900"></h3>
          <p data-notification-message class="mt-1 text-sm text-gray-500"></p>
        </div>
        
        <!-- Close button -->
        <button type="button" data-action="application#hideNotification" class="flex-shrink-0 text-gray-400 hover:text-gray-500">
          <span class="sr-only">Close</span>
          <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Debug panel (hidden in production) -->
    <% unless Rails.env.production? %>
      <%= render "shared/debug_panel" %>
    <% end %>
    
    <!-- Login modal -->
    <%= render "shared/login_modal" %>
    
    <!-- Global active call controller -->
    <div id="active-call-controller" 
         data-controller="active-call"
         class="fixed inset-0 z-[9999] flex items-center justify-center pointer-events-none">
      <div class="bg-white rounded-lg shadow-lg opacity-0 transition-opacity duration-200 hidden flex flex-col items-center justify-center max-w-md w-full pointer-events-auto"
           data-active-call-target="overlay">
        
        <!-- Call Information -->
        <div class="px-6 pt-6 pb-4 text-center">
          <!-- Phone Number Display -->
          <div class="text-2xl font-semibold mb-2" data-active-call-target="phoneNumber">+1 555-123-4567</div>
          
          <!-- Call Status -->
          <div class="text-amber-500 font-medium mb-2" data-active-call-target="status">Connecting...</div>
          
          <!-- Call Timer -->
          <div class="text-3xl font-bold mb-4" data-active-call-target="timer">0:00</div>
          
          <!-- Credit Balance -->
          <div class="text-sm text-gray-500">
            Balance: $<span data-active-call-target="credits" data-application-balance></span>
          </div>
        </div>
        
        <!-- End Call Button -->
        <div class="flex justify-center pb-6">
          <button class="w-16 h-16 rounded-full bg-[#FF4444] hover:bg-[#E60000] flex items-center justify-center shadow-[0px_4px_8px_rgba(255,68,68,0.25)] active:scale-95 transition-all"
                  data-action="click->active-call#endCall">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
    </div>
    
    <% if user_signed_in? %>
      <script>
        // Set auth token for users already logged in via Rails session
        if (!localStorage.getItem('auth_token')) {
          console.log('User is logged in via Rails session, setting auth token');
          // Fetch token from API
          fetch('/api/v1/auth/me', {
            headers: {
              'Accept': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
            },
            credentials: 'same-origin' // Send cookies
          })
          .then(response => {
            if (response.ok) {
              return response.json();
            }
            throw new Error('Failed to get user info');
          })
          .then(data => {
            // Create JWT token
            fetch('/api/v1/auth/login_from_session', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
              },
              credentials: 'same-origin' // Send cookies
            })
            .then(response => response.json())
            .then(data => {
              if (data.token) {
                localStorage.setItem('auth_token', data.token);
                console.log('Auth token set from session');
              }
            });
          })
          .catch(error => console.error('Error setting auth token:', error));
        }
      </script>
    <% end %>
    
    <!-- Direct webhook event handler - add this to ensure modal closes -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        console.log('Setting up direct call event handlers');
        
        // DIRECT FIX: Monitor for active call and force polling using a custom approach
        function setupCallMonitoring() {
          // This approach doesn't require accessing Stimulus controller directly
          const controller = document.getElementById('active-call-controller');
          
          if (!controller) {
            console.error('Could not find active-call-controller element');
            return;
          }
          
          // Function to start polling based on element attributes
          function checkAndStartPolling() {
            const state = controller.getAttribute('data-active-call-state-value');
            const callId = controller.getAttribute('data-active-call-call-id-value');
            
            if (state === 'active' && callId) {
              console.log('DIRECT FIX: Detected active call with ID:', callId);
              
              // Create a direct fetch polling mechanism
              if (!window.papercupPollingInterval) {
                console.log('DIRECT FIX: Starting direct polling for call:', callId);
                
                window.papercupPollingInterval = setInterval(() => {
                  console.log('DIRECT FIX: Polling for call status:', callId);
                  
                  // Create a fetch request that mimics the original API call
                  fetch(`/api/calls/${callId}`, {
                    headers: {
                      'Accept': 'application/json',
                      'Content-Type': 'application/json',
                      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
                    }
                  })
                  .then(response => response.json())
                  .then(data => {
                    console.log('DIRECT FIX: Poll response:', data);
                    
                    // Check if call has ended
                    if (['completed', 'failed', 'terminated', 'canceled', 'no-answer', 'busy', 'error'].includes(data.status)) {
                      console.log('DIRECT FIX: Detected call end in poll, status:', data.status);
                      
                      // Stop our polling
                      clearInterval(window.papercupPollingInterval);
                      window.papercupPollingInterval = null;
                      
                      // Force modal to hide
                      const overlay = document.querySelector('[data-active-call-target="overlay"]');
                      if (overlay) {
                        console.log('DIRECT FIX: Hiding overlay');
                        overlay.classList.remove('opacity-100');
                        overlay.classList.add('hidden');
                        
                        // Trigger the call ended event that the application expects
                        document.dispatchEvent(new CustomEvent('papercup:call-ended', {
                          detail: {
                            callId: callId,
                            status: data.status
                          }
                        }));
                      }
                    }
                  })
                  .catch(err => {
                    console.error('DIRECT FIX: Error polling:', err);
                  });
                }, 2000);
              }
            }
          }
          
          // Setup mutation observer to detect when state changes to 'active'
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.attributeName === 'data-active-call-state-value') {
                const newValue = controller.getAttribute('data-active-call-state-value');
                if (newValue === 'active') {
                  checkAndStartPolling();
                } else if (newValue === 'idle' || newValue === 'ended') {
                  // Stop polling if state changes to idle or ended
                  if (window.papercupPollingInterval) {
                    clearInterval(window.papercupPollingInterval);
                    window.papercupPollingInterval = null;
                    console.log('DIRECT FIX: Stopped polling due to state change to:', newValue);
                  }
                }
              }
            });
          });
          
          // Start observing
          observer.observe(controller, { 
            attributes: true, 
            attributeFilter: ['data-active-call-state-value'] 
          });
          
          // Also check immediately in case it's already active
          checkAndStartPolling();
        }
        
        // Start monitoring after a short delay to ensure DOM is ready
        setTimeout(setupCallMonitoring, 1000);
        
        // Listen for call ended event globally
        document.addEventListener('papercup:call-ended', function(event) {
          console.log('📞 DIRECT HANDLER: Call ended event received', event.detail);
          
          // Force modal to hide
          const overlay = document.querySelector('[data-active-call-target="overlay"]');
          if (overlay) {
            console.log('📞 DIRECT HANDLER: Found overlay, hiding it directly');
            overlay.classList.remove('opacity-100');
            overlay.classList.add('hidden');
            
            // Also dispatch hide-modal event to ensure all modals close
            document.dispatchEvent(new CustomEvent('papercup:hide-modal'));
          } else {
            console.log('📞 DIRECT HANDLER: Could not find overlay element');
          }
        });
        
        // Also listen for hide-modal events
        document.addEventListener('papercup:hide-modal', function() {
          console.log('📞 DIRECT HANDLER: Hide modal event received');
        });
        
        // Debug utility - make available globally for console debugging
        window.debugStimulusControllers = function() {
          const activeCallElements = document.querySelectorAll('[data-controller~="active-call"]');
          console.log('Active call controller elements:', activeCallElements.length);
          activeCallElements.forEach((el, i) => {
            console.log(`Element ${i}:`, el);
            
            // Direct attribute access instead of depending on controller instance
            console.log(`State: ${el.getAttribute('data-active-call-state-value')}, CallId: ${el.getAttribute('data-active-call-call-id-value')}`);
          });
          
          return {
            count: activeCallElements.length,
            startDirectPolling: function() {
              const el = activeCallElements[0];
              const callId = el.getAttribute('data-active-call-call-id-value');
              
              if (!callId) {
                return "No call ID found";
              }
              
              if (window.papercupPollingInterval) {
                clearInterval(window.papercupPollingInterval);
                window.papercupPollingInterval = null;
              }
              
              setupCallMonitoring();
              return `Started direct polling for call ${callId}`;
            },
            // Add a direct check for Twilio status
            checkTwilioStatus: async function() {
              const el = activeCallElements[0];
              const callId = el.getAttribute('data-active-call-call-id-value');
              
              if (!callId) {
                console.error("No call ID found");
                return "No call ID found";
              }
              
              // First fetch the call to get its Twilio SID
              try {
                const callResponse = await fetch(`/api/calls/${callId}`, {
                  headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
                  }
                });
                
                if (!callResponse.ok) {
                  console.error("Failed to fetch call data");
                  return "Failed to fetch call data";
                }
                
                const callData = await callResponse.json();
                
                if (!callData.twilio_sid) {
                  console.error("No Twilio SID found for call");
                  return "No Twilio SID found for call";
                }
                
                // Now check Twilio status directly
                const twilioResponse = await fetch(`/api/calls/twilio_status?sid=${callData.twilio_sid}`, {
                  headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
                  }
                });
                
                if (!twilioResponse.ok) {
                  console.error("Failed to check Twilio status");
                  return "Failed to check Twilio status";
                }
                
                const twilioData = await twilioResponse.json();
                console.log("Twilio status check result:", twilioData);
                
                // If Twilio says the call is completed but our UI doesn't know
                if (['completed', 'failed', 'canceled', 'busy', 'no-answer'].includes(twilioData.status) && 
                    el.getAttribute('data-active-call-state-value') === 'active') {
                  
                  console.log("Twilio reports call is ended, triggering call-ended event");
                  
                  // Dispatch call ended event
                  document.dispatchEvent(new CustomEvent('papercup:call-ended', {
                    detail: {
                      callId: callId,
                      status: twilioData.status,
                      source: 'manual_twilio_check'
                    }
                  }));
                  
                  return `Call has ended according to Twilio (${twilioData.status}). UI updated.`;
                }
                
                return `Twilio status: ${twilioData.status}, Call duration: ${twilioData.duration}s`;
                
              } catch (error) {
                console.error("Error checking Twilio status:", error);
                return `Error: ${error.message}`;
              }
            }
          };
        };
      });
    </script>
  </body>
</html>
